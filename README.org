* deep-crypto-unicorn-disruptive-fintech
Geospatial deep learning tool for unicorn feeding 


** Docker usage


*** Build image

#+BEGIN_SRC sh
docker build -t trading:latest .
#+END_SRC

*** Run Bot

#+BEGIN_SRC sh
docker run -it trading python main.py --help
usage: main.py [-h] [-v] [-y] [--dataset DATASET]

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  increase output verbosity
  -y, --yolo     output logs bescome crazy
  --dataset DATASET  load historic rates from file
#+END_SRC

*** Downloader usage

Download historical rates (low, high, open, close, volume) from the real (not sandbox) API.

Download rates for the month of January with a granularity of 30s:
#+BEGIN_SRC sh
export GDAX_API_KEY=XXX GDAX_API_SECRET=XXX GDAX_API_PASS=XXX

./historic_rates_downloader.py 2017-01-01T06:00:00 2017-01-31T23:59:59 60 BTC-USD > res.csv
# Downloading historic rates between 2017-01-01 06:00:00 and 2017-01-31 23:59:59 with granularity of 60 seconds
# Downloading rates between 2017-01-01 06:00:00 and 2017-01-01 09:20:00 ...
# Downloading rates between 2017-01-01 09:20:00 and 2017-01-01 12:40:00 ...
# ...

head res.csv
# time,low,high,open,close,volume
# 1496188840,2112.31,2336.88,2279.18,2191.58,20915.912901
# 1496188800,2173.8,2338.91,2191.6,2296.47,19739.0089984
# ...
#+END_SRC

*NOTE:* Samples are not guaranteed to be uniformly distributed. Please plot against timestamp.

*** Simulator usage

#+BEGIN_SRC python
from simulator import PortfolioSimulator
simulator = PortfolioSimulator()

simulator.buy('BTC-USD', 1, 1000)
# [Simulator] Buying 1 BTC at 1000 USD each
# [Simulator] Fees = 2.5 USD (0.0025 BTC)
# [Simulator] BTC balance = 0.9975 BTC
# [Simulator] USD balance = 0 USD

simulator.sell('BTC-USD', 0.9975, 1000)
# [Simulator] Selling 0.9975 BTC at 1000 USD each
# [Simulator] Total earnings = 997.5 USD
# [Simulator] BTC balance = 0.0 BTC
# [Simulator] USD balance = 997.5 USD
#+END_SRC

*** Run Jupyter 

To run jupyter-notebook in the container with the web interface accessible from within the browser 
of the host machine:

#+BEGIN_SRC sh
sudo docker run -p 8888:8888 -v $(pwd):/home/unicorn/data trading  \
jupyter-notebook --ip=0.0.0.0 --port=8888  --notebook-dir=/home/unicorn/data
#+END_SRC

You'll then be able to access the interface at http://localhost:8888/ 

You'll be asked to enter a token, this token is visible in the terminal a few seconds after having
launch the above command.


Note that this command will also mount the local directory (from which the command is launch,
typically from this repository) to =/home/unicorn/data=. This allows you to persists you work achieved
through the web interface.


See [[https://docs.docker.com][Docker documentation]] for more information about the options used.
